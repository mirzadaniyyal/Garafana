Node Exporter Installation
1. Next, we're going to set up and configure Node Exporter to collect Linux system metrics like CPU load and disk I/O. Node Exporter will expose these as Prometheus-style metrics.
First, let's create a system user for Node Exporter by running the following command:

sudo useradd \
    --system \
    --no-create-home \
    --shell /bin/false node_exporter


2. You can download Node Exporter from the same page.

https://prometheus.io/download/


3. Use wget command to download binary.

wget https://github.com/prometheus/node_exporter/releases/download/v1.3.1/node_exporter-1.3.1.linux-amd64.tar.gz


4. Extract node exporter from the archive.

tar -xvf node_exporter-1.3.1.linux-amd64.tar.gz



5. Move binary to the /usr/local/bin.

sudo mv \
  node_exporter-1.3.1.linux-amd64/node_exporter \
  /usr/local/bin/


6. Clean up, delete node_exporter archive and a folder.

rm -rf node_exporter*


7. Verify that you can run the binary.

node_exporter --version



8. Node Exporter has a lot of plugins that we can enable. If you run Node Exporter help you will get all the options.

node_exporter --help



9.--collector.logind We're going to enable login controller, just for the demo.
Next, create similar systemd unit file.

nano /etc/systemd/system/node_exporter.service



node_exporter.service

[Unit]
Description=Node Exporter
Wants=network-online.target
After=network-online.target

StartLimitIntervalSec=500
StartLimitBurst=5

[Service]
User=node_exporter
Group=node_exporter
Type=simple
Restart=on-failure
RestartSec=5s
ExecStart=/usr/local/bin/node_exporter \
    --collector.logind

[Install]
WantedBy=multi-user.target



10. Replace Prometheus user and group to node_exporter, and update ExecStart command.
To automatically start the Node Exporter after reboot, enable the service.

sudo systemctl enable node_exporter


11. Then start the Node Exporter.

sudo systemctl start node_exporter


12. Check the status of Node Exporter with the following command:

sudo systemctl status node_exporter


13. If you have any issues, check logs with journalctl

journalctl -u node_exporter -f --no-pager


14. At this point, we have only a single target in our Prometheus. There are many different service discovery mechanisms built into Prometheus. For example, Prometheus can dynamically discover targets in AWS, GCP, and other clouds based on the labels. In the following tutorials, I'll give you a few examples of deploying Prometheus in a cloud-specific environment. For this tutorial, let's keep it simple and keep adding static targets. Also, I have a lesson on how to deploy and manage Prometheus in the Kubernetes cluster.
15. To create a static target, you need to add job_name with static_configs.

nano /etc/prometheus/prometheus.yml

